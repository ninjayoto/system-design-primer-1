{
    "Metadata" : {
	"Comment" : "Hello, my intrepid developer! We're entering what we call, Infrastructure-as-a-Service code. This is logic that describes what your cloud will look like in the cloud #cloud-ception. I know, it's a bit strange that this is all written in JSON, but look at it more like a template that defines and describes relationships between things, rather than straight-up Python, JavaScript, or any general-purpose programming language you're use to. This is for the cloud, specifically."
    },
    "Resources" : {
	"LoadBalancer" : {
  	    "Metadata" : {
		"Comment" : "We're creating what's called a Load Balancer. This component sits in front of a pool of servers, and decides who gets what. Specifically, it takes care of: (1) Distributing network requests across multiple servers. (2) Keeping track of your healthy servers aka servers that can respond to a request, and sending requests only to the healthy ones. (3) Making it really dang easy to add or subtract servers from a pool of computers."
	    },
	    "Type" : "AWS::ElasticLoadBalancing::LoadBalancer",
	    "Properties" : {
		"LoadBalancerName" : "Basic-Web-System-LB",
		"Scheme" : "internet-facing",
		"AvailabilityZones" : [{ "Fn::Select" : [0, {"Fn::GetAZs" : { "Ref" : "AWS::Region" }}]}],
		"Listeners" : [
		    {
			"InstancePort" : "80",
			"LoadBalancerPort" : "80",
			"InstanceProtocol" : "HTTP",
			"Protocol" : "HTTP"
		    }
		],
		"Tags" : [ {
		    "Key" : "Name",
		    "Value" : { "Ref" : "StackTag" }
		} ]
	    }
	},
	"BasicWebSystemAutoScalingGroup" : {
	    "Metadata" : {
		"Comment" : "Added a pool of computers."
	    },
	    "Type" : "AWS::AutoScaling::AutoScalingGroup",
	    "Properties" : {
		"AutoScalingGroupName" : "Basic-Web-System-ASG",
		"AvailabilityZones" : [{ "Fn::Select" : [0, {"Fn::GetAZs" : { "Ref" : "AWS::Region" }}]}],
		"DesiredCapacity" : "2",
		"HealthCheckType" : "EC2",
		"LaunchConfigurationName" : { "Ref" : "BasicWebSystemLaunchConfiguration" },
		"LoadBalancerNames" : [ { "Ref" : "LoadBalancer" } ],
		"MaxSize" : "3",
		"MinSize" : "2",
		"Tags" : [ {
		    "PropagateAtLaunch" : true,
		    "Key" : "Name",
		    "Value" : { "Ref" : "StackTag" }
		} ]
	    }
	},
	"BasicWebSystemSecurityGroup" : {
	    "Type" : "AWS::EC2::SecurityGroup",
	    "Properties" : {
		"GroupName" : "Basic-Web-System-SG",
		"GroupDescription" : "Security group primarily to allow for public SSH inbound traffic.",
		"Tags" : [ {
		    "Key" : "Name",
		    "Value" : { "Ref" : "StackTag" }
		} ]
	    }
	},
	"BasicWebSystemSGEgress" : {
	    "Type" : "AWS::EC2::SecurityGroupEgress",
	    "Properties" : {
		"CidrIp" : "0.0.0.0/0",
		"GroupId" : { "Fn::GetAtt" : [
		    "BasicWebSystemSecurityGroup",
		    "GroupId"
		]},
		"Description" : "Allows all traffic out.",
		"IpProtocol" : "-1",
		"FromPort" : 0,
		"ToPort" : 65535
	    }
	},
	"BasicWebSystemSGIngress" : {
	    "Type" : "AWS::EC2::SecurityGroupIngress",
	    "Properties" : {
 		"GroupId" : { "Fn::GetAtt" : [
		    "BasicWebSystemSecurityGroup",
		    "GroupId"
		]},
		"Description" : "Allows all traffic w/in VPC.",
		"IpProtocol" : "-1",
		"FromPort" : 0,
		"ToPort" : 65535,
		"SourceSecurityGroupId" : { "Fn::GetAtt" : [
		    "BasicWebSystemSecurityGroup",
		    "GroupId"
		]}
	    }
	},
	"BasicWebSystemSGHTTPIngress" : {
	    "Type" : "AWS::EC2::SecurityGroupIngress",
	    "Properties" : {
		"CidrIp" : "0.0.0.0/0",
 		"GroupId" : { "Fn::GetAtt" : [
		    "BasicWebSystemSecurityGroup",
		    "GroupId"
		]},
		"Description" : "Allows all HTTP inbound traffic.",
		"IpProtocol" : "tcp",
		"FromPort" : "80",
		"ToPort" : "80"
	    }
	},
	"BasicWebSystemSGSSHIngress" : {
	    "Type" : "AWS::EC2::SecurityGroupIngress",
	    "Properties" : {
		"CidrIp" : "0.0.0.0/0",
 		"GroupId" : { "Fn::GetAtt" : [
		    "BasicWebSystemSecurityGroup",
		    "GroupId"
		]},
		"Description" : "Allows all SSH inbound traffic.",
		"IpProtocol" : "tcp",
		"FromPort" : "22",
		"ToPort" : "22"
	    }
	},
	"BasicWebSystemLaunchConfiguration" : {
	    "Metadata" : {
		"Comment" : "Tells you how to setup each instance in the pool of computers.",
		"AWS::CloudFormation::Init" : {
		    "configSets" : {
			"InstallAndRun" : [ "DownloadRepo", "BuildAndInstall", "Run" ]
		    },
		    "DownloadRepo" : {
			"sources" : {
			    "/etc/SimpleWebServer" : "https://github.com/phoenixcoder/IntroSystemDesign/tarball/master"
			}
		    },
		    "BuildAndInstall" : {
			"commands" : {
			    "BuildAndInstallSimpleWebServer" : {
				"command" : "/usr/local/go/bin/go install /etc/SimpleWebServer/go/src/simple_web_server.go",
				"env" : {
				    "GOBIN" : "/etc/SimpleWebServer/go/bin/",
				    "GOCACHE" : "/tmp/SimpleWebServer/go/cache"
				}
			    }
			}
		    },
		    "Run" : {
			"commands" : {
			    "RunSimpleWebServer" : {
				"command" : "sudo /etc/SimpleWebServer/go/bin/simple_web_server $(curl http://169.254.169.254/latest/meta-data/instance-id) &"
			    }
			}
		    }
		}
	    },
	    "Type" : "AWS::AutoScaling::LaunchConfiguration",
	    "Properties" : {
		"ImageId" : "ami-a0cfeed8",
		"InstanceType" : "t2.micro",
		"KeyName" : "test",
		"UserData" : { "Fn::Base64" :
			       { "Fn::Join" : ["", [
				   "#!/bin/bash -xev\n",
				   "yum install -y aws-cfn-bootstrap\n",
				   "curl https://dl.google.com/go/go1.12.6.linux-amd64.tar.gz --output /usr/local/go1.12.6.linux-amd64.tar.gz\n",
				   "cd /usr/local/\n",
				   "tar -xzf go1.12.6.linux-amd64.tar.gz\n",
				   "rm go1.12.6.linux-amd64.tar.gz\n",
				   "/opt/aws/bin/cfn-init -v",
				   " --stack ", { "Ref" : "AWS::StackName" },
				   " --resource BasicWebSystemLaunchConfiguration",
				   " --configsets InstallAndRun",
				   " --region ", { "Ref" : "AWS::Region" },
				   "\n"]]
			       }
			     }
	    }
	}
    },
    "Parameters" : {
	"StackTag" : {
	    "Type" : "String",
	    "Default" : "phoenixcoder",
	    "Description" : "A way to find your straggling resources."
	}
    }
}
